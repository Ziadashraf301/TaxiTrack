{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.0", "generated_at": "2025-05-27T16:46:39.866451Z", "invocation_id": "05a031b0-7e90-45dc-9d32-948e174fb075", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-27T16:46:39.663805Z", "completed_at": "2025-05-27T16:46:39.700961Z"}, {"name": "execute", "started_at": "2025-05-27T16:46:39.703124Z", "completed_at": "2025-05-27T16:46:39.703155Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06130480766296387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.staging_green_tripdata_current_month", "compiled": true, "compiled_code": "-- models/staging/staging_green_tripdata_all.sql\n-- (This was the file you uploaded with fullContent)\n\n\n\n\nwith source as (\n\n    select *\n    from \"ingest_db\".\"public\".\"green_tripdata_2020-01\"\n\n),\n\nwith_uid as (\n\n    select\n        \n    md5(\n        concat_ws(\n            '||',\n            cast(lpep_pickup_datetime as text), cast(lpep_dropoff_datetime as text), cast(total_amount as text)\n        )\n    )\n as trip_uid,\n        *\n    from source\n\n)\n\nselect *\nfrom with_uid", "relation_name": "\"ingest_db\".\"public\".\"staging_green_tripdata_current_month\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-27T16:46:39.714084Z", "completed_at": "2025-05-27T16:46:39.717941Z"}, {"name": "execute", "started_at": "2025-05-27T16:46:39.719938Z", "completed_at": "2025-05-27T16:46:39.719961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010750055313110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.lookup_data", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-27T16:46:39.729292Z", "completed_at": "2025-05-27T16:46:39.749713Z"}, {"name": "execute", "started_at": "2025-05-27T16:46:39.751547Z", "completed_at": "2025-05-27T16:46:39.751569Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026938676834106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_dbt_project.test_calculate_tip_rate", "compiled": true, "compiled_code": "-- tests/test_calculate_tip_rate.sql\n\nwith test_data as (\n    select 5 as tip_amount, 10 as fare_amount, 0.5 as expected_tip_rate\n    union all\n    select 3, 0, NULL\n    union all\n    select NULL, 15, NULL\n),\n\nactual as (\n    select\n        *,\n        \n    avg(\n        case\n            when fare_amount is null or fare_amount = 0 then null\n            else cast(tip_amount as float) / fare_amount\n        end\n    )\n as actual_tip_rate\n    from test_data\n)\n\nselect *\nfrom actual\nwhere not (\n    (actual_tip_rate = expected_tip_rate)\n    or (actual_tip_rate is null and expected_tip_rate is null)\n)", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-27T16:46:39.759997Z", "completed_at": "2025-05-27T16:46:39.781757Z"}, {"name": "execute", "started_at": "2025-05-27T16:46:39.784749Z", "completed_at": "2025-05-27T16:46:39.784781Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02860093116760254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_dbt_project.test_is_valid_trip", "compiled": true, "compiled_code": "-- tests/test_is_valid_trip.sql\n\nwith test_data as (\n    select 1 as trip_distance, 10 as fare_amount, 1 as passenger_count,\n           TIMESTAMP '2021-01-01 12:00:00' as pickup_datetime,\n           TIMESTAMP '2021-01-01 12:02:00' as dropoff_datetime,\n           true as expected_is_valid\n    union all\n    select 0, 10, 1, TIMESTAMP '2021-01-01 12:00:00', TIMESTAMP '2021-01-01 12:02:00', false\n),\n\nactual as (\n    select\n        *,\n        \n    trip_distance > 0\n    AND fare_amount > 0\n    AND passenger_count > 0\n    AND EXTRACT(EPOCH FROM lpep_dropoff_datetime - lpep_pickup_datetime) > 60\n as actual_is_valid\n    from test_data\n)\n\nselect *\nfrom actual\nwhere actual_is_valid != expected_is_valid", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-27T16:46:39.793774Z", "completed_at": "2025-05-27T16:46:39.820427Z"}, {"name": "execute", "started_at": "2025-05-27T16:46:39.822385Z", "completed_at": "2025-05-27T16:46:39.822409Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03328752517700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_dbt_project.test_standardize_payment_type", "compiled": true, "compiled_code": "-- tests/test_standardize_payment_type.sql\n\nwith test_data as (\n    select 1 as payment_type, 'Credit Card' as expected\n    union all\n    select 3, 'No Charge'\n    union all\n    select 6, 'Voided Trip'\n),\n\nactual as (\n    select\n        *,\n        \ncoalesce(\n  case payment_type\n    when 1 then 'Credit Card'\n    when 2 then 'Cash'\n    when 3 then 'No Charge'\n    when 4 then 'Dispute'\n    when 5 then 'Unknown'\n    when 6 then 'Voided Trip'\n    else 'Other'\n  end,\n  'Unknown'\n)  as actual\n    from test_data\n)\n\nselect *\nfrom actual\nwhere not (\n    actual = expected\n    or (actual is null and expected is null)\n)", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-27T16:46:39.834837Z", "completed_at": "2025-05-27T16:46:39.857948Z"}, {"name": "execute", "started_at": "2025-05-27T16:46:39.860003Z", "completed_at": "2025-05-27T16:46:39.860028Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.032244205474853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.marts_green_tripdata_summary_all", "compiled": true, "compiled_code": "\n\n-- 1. Run the summary macro into a CTE\nwith monthly_summary as (\n  \nselect\n    \ncoalesce(\n  case \"VendorID\"\n    when 1 then 'Creative Mobile Technologies'\n    when 2 then 'VeriFone Inc.'\n    else 'Other'\n  end,\n  'Unknown'\n)  as vendor_label,\n    \n  extract(month  from lpep_pickup_datetime) as trip_month,\n  extract(quarter from lpep_pickup_datetime) as trip_quarter,\n  extract(day    from lpep_pickup_datetime) as trip_day,\n  extract(dow    from lpep_pickup_datetime) as trip_weekday,\n  case when extract(dow from lpep_pickup_datetime) in (0,6) then 'Weekend' else 'Weekday' end as day_type,\n  extract(hour   from lpep_pickup_datetime) as trip_hour\n,\n    \ncoalesce(\n  case payment_type\n    when 1 then 'Credit Card'\n    when 2 then 'Cash'\n    when 3 then 'No Charge'\n    when 4 then 'Dispute'\n    when 5 then 'Unknown'\n    when 6 then 'Voided Trip'\n    else 'Other'\n  end,\n  'Unknown'\n)  as payment_type_label,\n    \n    case\n      when avg(trip_distance) <= 2 then 'Short'\n      when avg(trip_distance) <= 5 then 'Medium'\n      else 'Long'\n    end\n as trip_type,\n    count(*) as trip_count,\n    round(avg(trip_distance)::numeric,2) as avg_distance,\n    round(sum(trip_distance)::numeric,2) as total_distance,\n    round(avg(fare_amount)::numeric,2) as avg_fare,\n    round(sum(fare_amount)::numeric,2) as total_fare,\n    round(sum(tip_amount)::numeric,2) as total_tip,\n    round(avg(tip_amount)::numeric,2) as avg_tip,\n    round(avg(total_amount)::numeric,2) as avg_total,\n    round(avg(passenger_count)::numeric,2) as avg_passenger_count,\n    count(distinct \"PULocationID\") as unique_pickup_locations,\n    min(lpep_pickup_datetime) as first_trip,\n    max(lpep_pickup_datetime) as last_trip,\n\n    -- Peak morning and evening hours using the hour extracted from pickup datetime\n    count(*) filter(where extract(hour from lpep_pickup_datetime) between 6 and 9) as peak_morning_hours,\n    count(*) filter(where extract(hour from lpep_pickup_datetime) between 17 and 19) as peak_evening_hours,\n    \n    round(\n      max(\n        case\n          when lpep_dropoff_datetime is not null then\n            extract(epoch from lpep_dropoff_datetime - lpep_pickup_datetime) / 60\n          else null\n        end\n      ), 2\n    )\n as trip_duration_minutes,\n    -- Calculating average tip rate\n    round(\n    avg(\n        case\n            when fare_amount is null or fare_amount = 0 then null\n            else cast(tip_amount as float) / fare_amount\n        end\n    )\n::numeric, 2) as tip_rate\n\nfrom \"ingest_db\".\"public\".\"staging_green_tripdata_current_month\"\nwhere \n    trip_distance > 0\n    AND fare_amount > 0\n    AND passenger_count > 0\n    AND EXTRACT(EPOCH FROM lpep_dropoff_datetime - lpep_pickup_datetime) > 60\n\ngroup by vendor_label, trip_month, trip_quarter, trip_day,\n         trip_weekday, day_type, payment_type_label, trip_hour\norder by vendor_label, trip_month, trip_weekday, trip_hour\n\n),\n\n-- 2. Add trip_uid column in a second CTE\nwith_uid as (\n  select\n    \n    md5(\n        concat_ws(\n            '||',\n            cast(first_trip as text), cast(last_trip as text), cast(unique_pickup_locations as text)\n        )\n    )\n as trip_uid,\n    *\n  from monthly_summary\n)\n\n-- 3. Final output with optional incremental filtering\nselect *\nfrom with_uid\n\n\nwhere trip_uid not in (\n    select trip_uid from \"ingest_db\".\"public\".\"green_tripdata_summary_all\"\n)\n", "relation_name": "\"ingest_db\".\"public\".\"green_tripdata_summary_all\"", "batch_results": null}], "elapsed_time": 0.48148179054260254, "args": {"log_path": "/dbt/logs", "profiles_dir": "/dbt", "log_format_file": "debug", "show_resource_report": false, "require_yaml_configuration_for_mf_time_spines": false, "use_colors": true, "use_colors_file": true, "introspect": true, "printer_width": 80, "state_modified_compare_vars": false, "require_resource_names_without_spaces": false, "version_check": true, "indirect_selection": "eager", "which": "compile", "inject_ephemeral_ctes": true, "log_format": "default", "log_level": "info", "static_parser": true, "macro_debugging": false, "exclude": [], "require_explicit_package_overrides_for_builtin_materializations": true, "state_modified_compare_more_unrendered_values": false, "vars": {}, "cache_selected_only": false, "log_file_max_bytes": 10485760, "project_dir": "/dbt", "print": true, "warn_error_options": {"include": [], "exclude": []}, "write_json": true, "require_nested_cumulative_type_params": false, "select": [], "populate_cache": true, "defer": false, "send_anonymous_usage_stats": true, "output": "text", "invocation_command": "dbt compile", "partial_parse": true, "skip_nodes_if_on_run_start_fails": false, "empty": false, "log_level_file": "debug", "require_batched_execution_for_custom_microbatch_strategy": false, "source_freshness_run_project_hooks": false, "strict_mode": false, "quiet": false, "partial_parse_file_diff": true, "favor_state": false}}