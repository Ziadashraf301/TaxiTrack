{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.0", "generated_at": "2025-07-26T17:00:51.756369Z", "invocation_id": "a7d5058b-d712-4cd8-bcd2-2fdbcd7df359", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-26T17:00:51.374126Z", "completed_at": "2025-07-26T17:00:51.445291Z"}, {"name": "execute", "started_at": "2025-07-26T17:00:51.454532Z", "completed_at": "2025-07-26T17:00:51.454651Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08435606956481934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.staging_green_tripdata_current_month", "compiled": true, "compiled_code": "-- models/staging/staging_green_tripdata_all.sql\n-- (This was the file you uploaded with fullContent)\n\n\n\n\nwith source as (\n\n    select *\n    from \"ingest_db\".\"public\".\"green_tripdata_2020-01\"\n\n),\n\nwith_uid as (\n\n    select\n        \n    md5(\n        concat_ws(\n            '||',\n            cast(lpep_pickup_datetime as text), cast(lpep_dropoff_datetime as text), cast(total_amount as text)\n        )\n    )\n as trip_uid,\n        *\n    from source\n\n)\n\nselect *\nfrom with_uid", "relation_name": "\"ingest_db\".\"public\".\"staging_green_tripdata_current_month\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-26T17:00:51.475183Z", "completed_at": "2025-07-26T17:00:51.478986Z"}, {"name": "execute", "started_at": "2025-07-26T17:00:51.482194Z", "completed_at": "2025-07-26T17:00:51.482224Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014657974243164062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.my_dbt_project.lookup_data", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-26T17:00:51.494785Z", "completed_at": "2025-07-26T17:00:51.554867Z"}, {"name": "execute", "started_at": "2025-07-26T17:00:51.565573Z", "completed_at": "2025-07-26T17:00:51.565655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07761192321777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_dbt_project.test_calculate_tip_rate", "compiled": true, "compiled_code": "-- tests/test_calculate_tip_rate.sql\n\nwith test_data as (\n    select 5 as tip_amount, 10 as fare_amount, 0.5 as expected_tip_rate\n    union all\n    select 3, 0, NULL\n    union all\n    select NULL, 15, NULL\n),\n\nactual as (\n    select\n        *,\n        \n    avg(\n        case\n            when fare_amount is null or fare_amount = 0 then null\n            else cast(tip_amount as float) / fare_amount\n        end\n    )\n as actual_tip_rate\n    from test_data\n)\n\nselect *\nfrom actual\nwhere not (\n    (actual_tip_rate = expected_tip_rate)\n    or (actual_tip_rate is null and expected_tip_rate is null)\n)", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-26T17:00:51.605987Z", "completed_at": "2025-07-26T17:00:51.667951Z"}, {"name": "execute", "started_at": "2025-07-26T17:00:51.673006Z", "completed_at": "2025-07-26T17:00:51.673073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08416891098022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_dbt_project.test_is_valid_trip", "compiled": true, "compiled_code": "-- tests/test_is_valid_trip.sql\n\nwith test_data as (\n    select 1 as trip_distance, 10 as fare_amount, 1 as passenger_count,\n           TIMESTAMP '2021-01-01 12:00:00' as pickup_datetime,\n           TIMESTAMP '2021-01-01 12:02:00' as dropoff_datetime,\n           true as expected_is_valid\n    union all\n    select 0, 10, 1, TIMESTAMP '2021-01-01 12:00:00', TIMESTAMP '2021-01-01 12:02:00', false\n),\n\nactual as (\n    select\n        *,\n        \n    trip_distance > 0\n    AND fare_amount > 0\n    AND passenger_count > 0\n    AND EXTRACT(EPOCH FROM lpep_dropoff_datetime - lpep_pickup_datetime) > 60\n as actual_is_valid\n    from test_data\n)\n\nselect *\nfrom actual\nwhere actual_is_valid != expected_is_valid", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-26T17:00:51.688792Z", "completed_at": "2025-07-26T17:00:51.707866Z"}, {"name": "execute", "started_at": "2025-07-26T17:00:51.711295Z", "completed_at": "2025-07-26T17:00:51.711323Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02951836585998535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.my_dbt_project.test_standardize_payment_type", "compiled": true, "compiled_code": "-- tests/test_standardize_payment_type.sql\n\nwith test_data as (\n    select 1 as payment_type, 'Credit Card' as expected\n    union all\n    select 3, 'No Charge'\n    union all\n    select 6, 'Voided Trip'\n),\n\nactual as (\n    select\n        *,\n        \ncoalesce(\n  case payment_type\n    when 1 then 'Credit Card'\n    when 2 then 'Cash'\n    when 3 then 'No Charge'\n    when 4 then 'Dispute'\n    when 5 then 'Unknown'\n    when 6 then 'Voided Trip'\n    else 'Other'\n  end,\n  'Unknown'\n)  as actual\n    from test_data\n)\n\nselect *\nfrom actual\nwhere not (\n    actual = expected\n    or (actual is null and expected is null)\n)", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-26T17:00:51.718695Z", "completed_at": "2025-07-26T17:00:51.745856Z"}, {"name": "execute", "started_at": "2025-07-26T17:00:51.747894Z", "completed_at": "2025-07-26T17:00:51.747912Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.032830238342285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.my_dbt_project.marts_green_tripdata_summary_all", "compiled": true, "compiled_code": "\n\n-- 1. Run the summary macro into a CTE\nwith monthly_summary as (\n  \nselect\n    \ncoalesce(\n  case \"VendorID\"\n    when 1 then 'Creative Mobile Technologies'\n    when 2 then 'VeriFone Inc.'\n    else 'Other'\n  end,\n  'Unknown'\n)  as vendor_label,\n    \n  extract(month  from lpep_pickup_datetime) as trip_month,\n  extract(quarter from lpep_pickup_datetime) as trip_quarter,\n  extract(day    from lpep_pickup_datetime) as trip_day,\n  extract(dow    from lpep_pickup_datetime) as trip_weekday,\n  case when extract(dow from lpep_pickup_datetime) in (0,6) then 'Weekend' else 'Weekday' end as day_type,\n  extract(hour   from lpep_pickup_datetime) as trip_hour\n,\n    \ncoalesce(\n  case payment_type\n    when 1 then 'Credit Card'\n    when 2 then 'Cash'\n    when 3 then 'No Charge'\n    when 4 then 'Dispute'\n    when 5 then 'Unknown'\n    when 6 then 'Voided Trip'\n    else 'Other'\n  end,\n  'Unknown'\n)  as payment_type_label,\n    \n    case\n      when avg(trip_distance) <= 2 then 'Short'\n      when avg(trip_distance) <= 5 then 'Medium'\n      else 'Long'\n    end\n as trip_type,\n    count(*) as trip_count,\n    round(avg(trip_distance)::numeric,2) as avg_distance,\n    round(sum(trip_distance)::numeric,2) as total_distance,\n    round(avg(fare_amount)::numeric,2) as avg_fare,\n    round(sum(fare_amount)::numeric,2) as total_fare,\n    round(sum(tip_amount)::numeric,2) as total_tip,\n    round(avg(tip_amount)::numeric,2) as avg_tip,\n    round(avg(total_amount)::numeric,2) as avg_total,\n    round(avg(passenger_count)::numeric,2) as avg_passenger_count,\n    count(distinct \"PULocationID\") as unique_pickup_locations,\n    min(lpep_pickup_datetime) as first_trip,\n    max(lpep_pickup_datetime) as last_trip,\n\n    -- Peak morning and evening hours using the hour extracted from pickup datetime\n    count(*) filter(where extract(hour from lpep_pickup_datetime) between 6 and 9) as peak_morning_hours,\n    count(*) filter(where extract(hour from lpep_pickup_datetime) between 17 and 19) as peak_evening_hours,\n    \n    round(\n      max(\n        case\n          when lpep_dropoff_datetime is not null then\n            extract(epoch from lpep_dropoff_datetime - lpep_pickup_datetime) / 60\n          else null\n        end\n      ), 2\n    )\n as trip_duration_minutes,\n    -- Calculating average tip rate\n    round(\n    avg(\n        case\n            when fare_amount is null or fare_amount = 0 then null\n            else cast(tip_amount as float) / fare_amount\n        end\n    )\n::numeric, 2) as tip_rate\n\nfrom \"ingest_db\".\"public\".\"staging_green_tripdata_current_month\"\nwhere \n    trip_distance > 0\n    AND fare_amount > 0\n    AND passenger_count > 0\n    AND EXTRACT(EPOCH FROM lpep_dropoff_datetime - lpep_pickup_datetime) > 60\n\ngroup by vendor_label, trip_month, trip_quarter, trip_day,\n         trip_weekday, day_type, payment_type_label, trip_hour\norder by vendor_label, trip_month, trip_weekday, trip_hour\n\n),\n\n-- 2. Add trip_uid column in a second CTE\nwith_uid as (\n  select\n    \n    md5(\n        concat_ws(\n            '||',\n            cast(first_trip as text), cast(last_trip as text), cast(unique_pickup_locations as text)\n        )\n    )\n as trip_uid,\n    *\n  from monthly_summary\n)\n\n-- 3. Final output with optional incremental filtering\nselect *\nfrom with_uid\n\n\nwhere trip_uid not in (\n    select trip_uid from \"ingest_db\".\"public\".\"green_tripdata_summary_all\"\n)\n", "relation_name": "\"ingest_db\".\"public\".\"green_tripdata_summary_all\"", "batch_results": null}], "elapsed_time": 0.6754708290100098, "args": {"select": [], "which": "compile", "output": "text", "source_freshness_run_project_hooks": false, "vars": {}, "profiles_dir": "/dbt", "write_json": true, "log_level": "info", "use_colors_file": true, "log_format": "default", "partial_parse_file_diff": true, "send_anonymous_usage_stats": true, "cache_selected_only": false, "partial_parse": true, "populate_cache": true, "skip_nodes_if_on_run_start_fails": false, "log_level_file": "debug", "require_nested_cumulative_type_params": false, "log_path": "/dbt/logs", "defer": false, "empty": false, "printer_width": 80, "require_yaml_configuration_for_mf_time_spines": false, "invocation_command": "dbt compile", "require_resource_names_without_spaces": false, "macro_debugging": false, "project_dir": "/dbt", "print": true, "state_modified_compare_vars": false, "indirect_selection": "eager", "require_batched_execution_for_custom_microbatch_strategy": false, "state_modified_compare_more_unrendered_values": false, "log_format_file": "debug", "use_colors": true, "quiet": false, "exclude": [], "inject_ephemeral_ctes": true, "version_check": true, "favor_state": false, "show_resource_report": false, "log_file_max_bytes": 10485760, "introspect": true, "static_parser": true, "strict_mode": false, "warn_error_options": {"include": [], "exclude": []}, "require_explicit_package_overrides_for_builtin_materializations": true}}